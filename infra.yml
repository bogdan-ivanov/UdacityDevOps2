Description: >
  George-Bogdan Ivanov
  Udacity DevOps ND - Project 2

Parameters:
  ENVIRON:
    Description: Resource prefix
    Type: String
    Default: UND
# whatever you consider a changing value, put it as a parameter instead of hard-coding it into your script
Resources:
  #instace profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
  # ProfileWithRolesForOurApp:
  #   Type: AWS::IAM::InstanceProfile
  #   Properties:
  #     Roles:
  #       - UdacityS3ReadOnlyEC2

  #         #!/bin/bash
  #         apt-get update -y
  #         apt-get install unzip awscli -y
  #         apt-get install apache2 -y
  #         systemctl start apache2.service
  #         cd /var/www/html
  #         aws s3 cp s3://udacity-demo-1/udacity.zip .
  #         unzip -o udacity.zip

# VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${ENVIRON} VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${ENVIRON} InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

# /VPC

# Subnets

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub ${ENVIRON} Public SubNet 1
        - Key: Type
          Value: Public SubNet

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub ${ENVIRON} Private SubNet 1
        - Key: Type
          Value: Private SubNet

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub ${ENVIRON} Public SubNet 2
        - Key: Type
          Value: Public SubNet

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub ${ENVIRON} Private SubNet 2
        - Key: Type
          Value: Private SubNet

  ElasticIP1:
    Type: AWS::EC2::EIP
    DependsOn: VPCGatewayAttachment
    Properties: 
      Domain: vpc

  NatGateway1: 
    Type: AWS::EC2::NatGateway
    DependsOn: ElasticIP1
    Properties: 
      AllocationId: !GetAtt ElasticIP1.AllocationId
      SubnetId: !Ref PublicSubnet1

  ElasticIP2:
    Type: AWS::EC2::EIP
    DependsOn: VPCGatewayAttachment
    Properties: 
      Domain: vpc

  NatGateway2: 
    Type: AWS::EC2::NatGateway
    DependsOn: ElasticIP2
    Properties: 
      AllocationId: !GetAtt ElasticIP2.AllocationId
      SubnetId: !Ref PublicSubnet2

# /Subnets

# Route Tables

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
        VpcId: !Ref VPC
        Tags:
            - Key: Name
              Value: !Sub ${ENVIRON} Public RouteTable

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
        VpcId: !Ref VPC
        Tags:
            - Key: Name
              Value: !Sub ${ENVIRON} Private RouteTable for PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
        VpcId: !Ref VPC
        Tags:
            - Key: Name
              Value: !Sub ${ENVIRON} Private RouteTable for PrivateSubnet2

# /Route Tables

# Routes
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRouteSubnet1:
    Type: AWS::EC2::Route
    DependsOn: NatGateway1
    Properties:
        RouteTableId: !Ref PrivateRouteTable1
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId: !Ref NatGateway1

  PrivateRouteSubnet2:
    Type: AWS::EC2::Route
    DependsOn: NatGateway2
    Properties:
        RouteTableId: !Ref PrivateRouteTable2
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId: !Ref NatGateway2

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

# /Routes
  
# Security Groups
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for the load balancer (allow inbound port 80 HTTP, allow * outbound)
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 1
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for the EC2 instances (allow inbound port 80 HTTP and 22 SSH, allow * outbound)
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 1
          ToPort: 65535
          CidrIp: 0.0.0.0/0
# /Security Groups

  #Outputs:
  #Bonus points for useful outputs!
